diff --git a/leveldb/LevelDbServer.cpp b/leveldb/LevelDbServer.cpp
index e0f27ce..b82b5b2 100644
--- a/leveldb/LevelDbServer.cpp
+++ b/leveldb/LevelDbServer.cpp
@@ -58,20 +58,24 @@ int blindupdate;
 class LevelDbServer: virtual public MapKeeperIf {
 public:
     LevelDbServer(const std::string& directoryName,
-                  uint32_t writeBufferSizeMb, uint32_t blockCacheSizeMb) : 
+                  uint32_t writeBufferSizeMb, uint32_t writeBufferSizeMb2, uint32_t blockCacheSizeMb, uint32_t num_levels) : 
         directoryName_(directoryName),
         writeBufferSizeMb_(writeBufferSizeMb),
+        writeBufferSizeMb_2(writeBufferSizeMb2),
+        num_levels_(num_levels),
         blockCacheSizeMb_(blockCacheSizeMb) {
         cache_ = leveldb::NewLRUCache(blockCacheSizeMb_ * 1024 * 1024);
 
         // open all the existing databases
         leveldb::DB* db;
         leveldb::Options options;
-        options.create_if_missing = false;
+        options.create_if_missing = true;
         options.error_if_exists = false;
         options.write_buffer_size = writeBufferSizeMb_ * 1024 * 1024;
+        options.write_buffer_size_2 = writeBufferSizeMb_2 * 1024 * 1024;
         options.block_cache = cache_;
         options.compression = leveldb::kNoCompression;
+        options.num_levels = num_levels_;
 
         boost::unique_lock< boost::shared_mutex > writeLock(mutex_);;
 
@@ -80,6 +84,10 @@ public:
             if (is_directory(itr->status())) {
                 std::string mapName = itr->path().filename().string();
                 leveldb::Status status = leveldb::DB::Open(options, itr->path().string(), &db);
+                if (!status.ok()) {
+                  fprintf(stderr, "open error: %s\n", status.ToString().c_str());
+                  exit(1);
+                }
                 assert(status.ok());
                 maps_.insert(mapName, db);
             }
@@ -96,7 +104,10 @@ public:
         options.create_if_missing = true;
         options.error_if_exists = true;
         options.write_buffer_size = writeBufferSizeMb_ * 1024 * 1024;
+        options.write_buffer_size_2 = writeBufferSizeMb_2 * 1024 * 1024;
         options.block_cache = cache_;
+        options.num_levels = num_levels_;
+        options.compression = leveldb::kNoCompression;
         leveldb::Status status = leveldb::DB::Open(options, directoryName_ + "/" + mapName, &db);
         if (!status.ok()) {
             // TODO check return code
@@ -328,7 +339,9 @@ public:
 private:
     std::string directoryName_; // directory to store db files.
     uint32_t writeBufferSizeMb_; 
-    uint32_t blockCacheSizeMb_; 
+    uint32_t writeBufferSizeMb_2; 
+    uint32_t blockCacheSizeMb_;
+    uint32_t num_levels_;
     leveldb::Cache* cache_;
     boost::ptr_map<std::string, leveldb::DB> maps_;
     boost::shared_mutex mutex_; // protect map_
@@ -337,6 +350,7 @@ private:
 int main(int argc, char **argv) {
     int port;
     int writeBufferSizeMb;
+    int writeBufferSizeMb
     int blockCacheSizeMb;
     std::string dir;
     po::variables_map vm;
